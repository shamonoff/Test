package oracle.foddemo.masterpricelist.model.queries;

import java.util.ArrayList;

import oracle.foddemo.masterpricelist.model.queries.common.ProductsVO;

import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 11 15:55:25 PST 2008
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProductsVOImpl extends ViewObjectImpl implements ProductsVO {
    /**
     * This is the default constructor (do not remove).
     */
    public ProductsVOImpl() {
    }

    public void executeSimpleProductQuery(String searchTerm, Boolean includeDiscontinued) {
      runProductQuery(searchTerm, null, includeDiscontinued);               
    }
    
    public void executeAdvancedProductQuery(String searchTerm, String categoryId, Boolean includeDiscontinued){
        runProductQuery(searchTerm, categoryId, includeDiscontinued);  
    }
    
    /**
     * Based on the inputs this method configures the VO using a series of 
     * query criteria. 
     * @param searchTerm
     * @param categoryId
     * @param includeDiscontinued
     */
    private void runProductQuery(String searchTerm, String categoryId, Boolean includeDiscontinued){
        ArrayList<String> queryCriteriaToUse = new ArrayList(3);
        
        //For info:
        StringBuilder sb = new StringBuilder("Search critera: [searchTerm=");
        sb.append(searchTerm);
        sb.append("] [categoryId=");
        sb.append(categoryId);
        sb.append("] [includeDiscontinued=");
        sb.append(includeDiscontinued);
        sb.append("]");
        System.out.println(sb.toString());
        
        //Clean up old criteria
        cleanPreviousQuery();
        
        //Capturing null search termns
        if(searchTerm == null){
          searchTerm ="%"; 
        }
            
        if(searchTerm !=null && searchTerm.length()>0){
            queryCriteriaToUse.add("SimpleStringQC");
            this.setsimpleQueryParam(searchTerm);
        }
        
        if(categoryId !=null && categoryId.length()>0){
            queryCriteriaToUse.add("SearchByCategoryQC");
            this.setsearchProductCategory(categoryId);
        }
        
        if (includeDiscontinued == null || !includeDiscontinued) {
            queryCriteriaToUse.add("ActiveProductsOnlyQC");
                
        }
        int qcSize = queryCriteriaToUse.size();
        if ( qcSize > 0){

            String[] qcs = new String[qcSize];
            int qcCount = 0;
            
            for (String qc: queryCriteriaToUse){
               qcs[qcCount] = qc;
               qcCount++;
            }
            
            setApplyViewCriteriaNames(qcs);
            executeQuery();            
        }
        
    }


    /**
     * Cleans up the current query by removing any of the cumulative view 
     * criteria that have been previously applied
     */
    private void cleanPreviousQuery(){
        removeApplyViewCriteriaName("SimpleStringQC");
        removeApplyViewCriteriaName("ActiveProductsOnlyQC");
        removeApplyViewCriteriaName("SearchByCategoryQC");
    }
   
   /**
     * Returns the bind variable value for sessionLanguage.
     * @return bind variable value for sessionLanguage
     */
    public String getsessionLanguage() {
        return (String)getNamedWhereClauseParam("sessionLanguage");
    }

    /**
     * Returns the variable value for simpleQueryParam.
     * @return variable value for simpleQueryParam
     */
    public String getsimpleQueryParam() {
        return (String)ensureVariableManager().getVariableValue("simpleQueryParam");
    }

    /**
     * Sets <code>value</code> for variable simpleQueryParam.
     * @param value value to bind as simpleQueryParam
     */
    public void setsimpleQueryParam(String value) {
        ensureVariableManager().setVariableValue("simpleQueryParam", value);
    }

    /**
     * Returns the variable value for searchProductCategory.
     * @return variable value for searchProductCategory
     */
    public String getsearchProductCategory() {
        return (String)ensureVariableManager().getVariableValue("searchProductCategory");
    }

    /**
     * Sets <code>value</code> for variable searchProductCategory.
     * @param value value to bind as searchProductCategory
     */
    public void setsearchProductCategory(String value) {
        ensureVariableManager().setVariableValue("searchProductCategory", value);
    }
}
