package oracle.foddemo.masterpricelist.model.service;

import oracle.foddemo.masterpricelist.model.queries.ProductsVOImpl;
import oracle.foddemo.masterpricelist.model.service.common.MasterPriceListService;

import oracle.jbo.SessionData;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 03 14:58:17 PST 2008
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MasterPriceListServiceImpl extends ApplicationModuleImpl implements MasterPriceListService {
    /**
     * This is the default constructor (do not remove).
     */
    public MasterPriceListServiceImpl() {
    }

    /**
     * Container's getter for ProductSuppliers.
     * @return ProductSuppliers
     */
    public ViewObjectImpl getProductSuppliers() {
        return (ViewObjectImpl)findViewObject("ProductSuppliers");
    }

    /**
     * Container's getter for ProductCategories.
     * @return ProductCategories
     */
    public ViewObjectImpl getProductCategories() {
        return (ViewObjectImpl)findViewObject("ProductCategories");
    }

    /**
     * Container's getter for ProductList.
     * @return ProductList
     */
    public ViewObjectImpl getProductList() {
        return (ViewObjectImpl)findViewObject("ProductList");
    }

    /**
     * Container's getter for ProductTranslationsList.
     * @return ProductTranslationsList
     */
    public ViewObjectImpl getProductTranslationsList() {
        return (ViewObjectImpl)findViewObject("ProductTranslationsList");
    }

    /**
     * Container's getter for ProductSalesByMonth.
     * @return ProductSalesByMonth
     */
    public ViewObjectImpl getProductSalesByMonth() {
        return (ViewObjectImpl)findViewObject("ProductSalesByMonth");
    }

    /**
     * Container's getter for AvailableLanguagesLOV.
     * @return AvailableLanguagesLOV
     */
    public ViewObjectImpl getAvailableLanguagesLOV() {
        return (ViewObjectImpl)findViewObject("AvailableLanguagesLOV");
    }

    /**
     * Container's getter for ProductStatusLOV.
     * @return ProductStatusLOV
     */
    public ViewObjectImpl getProductStatusLOV() {
        return (ViewObjectImpl)findViewObject("ProductStatusLOV");
    }

    /**
     * Container's getter for TopLevelCategories.
     * @return TopLevelCategories
     */
    public ViewObjectImpl getTopLevelCategories() {
        return (ViewObjectImpl)findViewObject("TopLevelCategories");
    }

    /**
     * Container's getter for ActiveDiscounts.
     * @return ActiveDiscounts
     */
    public ViewObjectImpl getActiveDiscounts() {
        return (ViewObjectImpl)findViewObject("ActiveDiscounts");
    }

    /**
     * Container's getter for ProductTranslationsLink1.
     * @return ProductTranslationsLink1
     */
    public ViewLinkImpl getProductTranslationsLink1() {
        return (ViewLinkImpl)findViewLink("ProductTranslationsLink1");
    }

    /**
     * Container's getter for ProductToSalesByMonth1.
     * @return ProductToSalesByMonth1
     */
    public ViewLinkImpl getProductToSalesByMonth1() {
        return (ViewLinkImpl)findViewLink("ProductToSalesByMonth1");
    }

     /**
      * Here we set the language context for Queries that are executed within
      * this AM so that we can then use that to pull the correct values
      * out of the various translation tables
      */
    @Override
    public void prepareSession(SessionData sessionData) {
        super.prepareSession(sessionData);
        /* TODO Pull out the current browser language and if that is one
         * of the supported languages then set that into the session.
         * Otherwise use the default language
         */
        getSession().getUserData().put("CurrentSessionLanguage", "EN");
    }
     
    /**
     * Get the active user
     */
    public String getConnectedUser() {
        return this.getUserPrincipalName();
    }


}
